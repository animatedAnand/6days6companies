// { Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& sl) {
        //code here
        vector<vector<string>>rv;
        set<string>st;
        int i,j,n=sl.size();
        string cs;
        for(i=0;i<n;i++)
        {
            cs=sl[i];
            sort(cs.begin(),cs.end());
            st.insert(cs);
        }
        vector<string>fv;
        for(i=0;i<n;i++)
        {
            cs=sl[i];
            sort(cs.begin(),cs.end());
            if(st.find(cs)!=st.end())
            {
              rv.push_back({sl[i]});
              fv.push_back(cs);
              st.erase(cs);
            }
            else
            {
                for(j=0;j<fv.size();j++) if(fv[j]==cs) break;
                rv[j].push_back(sl[i]);
            }
        }
        return rv;
    }
};

// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<string> string_list(n);
        for (int i = 0; i < n; ++i)
            cin>>string_list[i]; 
        Solution ob;
        vector<vector<string> > result = ob.Anagrams(string_list);
        sort(result.begin(),result.end());
        for (int i = 0; i < result.size(); i++)
        {
            for(int j=0; j < result[i].size(); j++)
            {
                cout<<result[i][j]<<" ";
            }
            cout<<"\n";
        }
    }

    return 0;
}
  // } Driver Code Ends
